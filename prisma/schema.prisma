// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider    = "postgresql"
  url         = env("DATABASE_URL")
  directUrl   = env("DIRECT_URL") 
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String
  expiresAt   DateTime
}

model User {
  id                String    @id @default(cuid())
  name              String?
  email             String?   @unique
  onBoarding        Boolean
  avatarUrl         String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  account           Account?
  transaction       Transaction[]
  saving            Saving[]
}

model Account {
  id                String    @id @default(cuid())
  userId            String    @unique
  oauthProvider     String
  oauthId           String

  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

model Transaction {
  id              String    @id @default(cuid())
  userId          String
  categoryId      String?
  type            TransactionType
  amount          BigInt
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  user            User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  category        TransactionCategory?  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
}

model TransactionCategory {
  id              String    @id @default(cuid())
  type            TransactionType
  name            String    @unique
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  transaction     Transaction[]
}

model Saving {
  id              String    @id @default(cuid())
  userId          String
  name            String
  goal            BigInt

  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  savingFund      SavingFund[]
}

model SavingFund {
  id              String    @id @default(cuid())
  transactionId   String
  savingId        String
  amount          BigInt
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  saving          Saving        @relation(fields: [savingId], references: [id], onDelete: Cascade)
}

enum TransactionType {
  INCOME
  EXPENSE
  SAVING
}